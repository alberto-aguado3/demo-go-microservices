// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/album_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	errors "demo/pkg/errors"
	model "demo/src/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// FindAlbumByArtistAndTitle mocks base method.
func (m *MockAlbumRepository) FindAlbumByArtistAndTitle(ctx context.Context, artistName, title string) (model.Album, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlbumByArtistAndTitle", ctx, artistName, title)
	ret0, _ := ret[0].(model.Album)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// FindAlbumByArtistAndTitle indicates an expected call of FindAlbumByArtistAndTitle.
func (mr *MockAlbumRepositoryMockRecorder) FindAlbumByArtistAndTitle(ctx, artistName, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlbumByArtistAndTitle", reflect.TypeOf((*MockAlbumRepository)(nil).FindAlbumByArtistAndTitle), ctx, artistName, title)
}

// FindAllAlbums mocks base method.
func (m *MockAlbumRepository) FindAllAlbums(ctx context.Context) ([]model.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAlbums", ctx)
	ret0, _ := ret[0].([]model.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAlbums indicates an expected call of FindAllAlbums.
func (mr *MockAlbumRepositoryMockRecorder) FindAllAlbums(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAlbums", reflect.TypeOf((*MockAlbumRepository)(nil).FindAllAlbums), ctx)
}

// StoreAlbum mocks base method.
func (m *MockAlbumRepository) StoreAlbum(ctx context.Context, album model.Album) *errors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAlbum", ctx, album)
	ret0, _ := ret[0].(*errors.ApiError)
	return ret0
}

// StoreAlbum indicates an expected call of StoreAlbum.
func (mr *MockAlbumRepositoryMockRecorder) StoreAlbum(ctx, album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).StoreAlbum), ctx, album)
}
