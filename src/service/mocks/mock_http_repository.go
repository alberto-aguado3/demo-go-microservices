// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/http_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpRepository is a mock of HttpRepository interface.
type MockHttpRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRepositoryMockRecorder
}

// MockHttpRepositoryMockRecorder is the mock recorder for MockHttpRepository.
type MockHttpRepositoryMockRecorder struct {
	mock *MockHttpRepository
}

// NewMockHttpRepository creates a new mock instance.
func NewMockHttpRepository(ctrl *gomock.Controller) *MockHttpRepository {
	mock := &MockHttpRepository{ctrl: ctrl}
	mock.recorder = &MockHttpRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRepository) EXPECT() *MockHttpRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHttpRepository) Get(url string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockHttpRepositoryMockRecorder) Get(url, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpRepository)(nil).Get), url, response)
}
